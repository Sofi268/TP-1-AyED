#include <cstdlib>
#include <iostream>
#include <sstream>
#include <string>
using namespace std;

////////////// INICIO CLASE PEDIDO ///////////////
    class Pedido : Fruta {
public:
    //CONSTRUCTOR-DESTRUCTOR
    Pedido();
    ~Pedido();
    
    
    //SETTERS
    void setCliente(string);
    void setTipoFruta(string); //ver nombre de clase Fruta
    void setcantidadFruta(int);
    void settipoDeVenta(bool); //true mayorista
    void setListo(bool); //pedido entregado
   
    //GETTERS
    string getCliente();
    string getTipoFruta(); 
    int getcantidadFruta();
    bool getEsMayorista(); 
    bool getListo(); 
    
   //FUNCIONES
   
   void imprimirPedido();


private:
    string TIPO;
    string NOMBRE;
    int CANTIDAD = 0;
    bool TIPO_VENTA = true;
   
    };
    
//CONSTRUCTOR-DESTRUCTOR    
Pedido::Pedido(string nombre, string tipoFruta, int cantidad, bool tipoVenta){ TIPO = tipoFruta , NOMBRE = nombre , CANTIDAD = cantidad , TIPO_VENTA = tipoVenta};

Pedido::~Pedido(){cout<<"\nDestructor";}
//SETTERS
void Pedido::setCliente(string nombre){NOMBRE=nombre;}
void Pedido::settipoDeVenta(bool tipoV){TIPO_VENTA=tipoV;}
void Pedido::setcantidadFruta(int cantidad){CANTIDAD=cantidad;}

} 
//GETTERS
    string Pedido::getCliente(){return NOMBRE;}
    int Pedido::getcantidadFruta(){return CANTIDAD;}
    bool Pedido::getEsMayorista(){return TIPO_VENTA;}
    string Pedido::getTipoFruta(){return TIPO;}


void Pedido::imprimirPedido(){
    
    if(TIPO_VENTA == true){
        
        cout<< "Nombre del cliente: " << NOMBRE << " - Fruta: " << TIPO << " - Cantidad: " << CANTIDAD << " de cajones."  << endl;
        
    }else{
        
        cout<< "Nombre del cliente: " << NOMBRE << " - Fruta: " << TIPO << " - Cantidad: " << CANTIDAD << " de kilos."  << endl;
    }
    
    
}

//*************** FIN CLASE PEDIDO ************************

//////////// INICIO CLASE GESTOR DE PEDIDOS ///////////////

 class GestorDePedidos:public Pedido{
   
    public:
   
    //CONSTRUCTOR
    GestorDePedidos();
    ~GestorDePedidos();
    
  
    //FUNCIONES
     
    void gestion_Mayorista();
    void gestion_minorista();
    void gestor(bool);
   

    private:
     
     Stock *STOCK;
     ColaGestorDePedidos *COLA_PEDIDOS;
    
    };
    
    //CONSTRUCTOR
    GestorDePedidos::GestorDePedidos(Stock *stock , ColaGestorDePedidos *cola_pedidos){
            
        STOCK = stock;
        COLA_PEDIDOS = cola_pedidos;
    }
    GestorDePedidos::~GestorDePedidos(){}
  
    
    //FUNCIONES
    void GestorDePedidos::gestion_Mayorista(){
        Pedido *aux2  = COLA_PEDIDOS->get_colaMayorista()->tope();
	int fruta = 0;
	
	//le asigno numeros a las frutas para ver cual es la que necesito para sacar de stock 
	if(aux2->getTipoFruta() == "Banana"){fruta = 1;} 
	if(aux2->getTipoFruta() == "Frutilla"){fruta = 2;}
	if(aux2->getTipoFruta() == "Mandarina"){fruta = 3;}
      
      if(STOCK->metodo para vero la Cantidad de frutas > aux2->getcantidadFruta()){
          cout<<"-Realizo venta mayorista-" << endl ;
          //saco la fruta de stock
      }else{//si no me alcanza la fruta que tengo en stock lo mando a pendientes
      
            cout << "La cantidad solicitada no esta disponible, estara en espera" << endl;M
            COLA_PEDIDOS->agregarPedidoPendiente(aux2);
      }
  
    }
    
    void GestorDePedidos::gestion_minorista(){
      	Pedido *aux2  = COLA_PEDIDOS->get_colaMinorista()->tope();
	int fruta = 0;
	
	//le asigno numeros a las frutas para ver cual es la que necesito para sacar de stock 
	if(aux2->getTipoFruta() == "Banana"){fruta = 1;} 
	if(aux2->getTipoFruta() == "Frutilla"){fruta = 2;}
	if(aux2->getTipoFruta() == "Mandarina"){fruta = 3;}
      
      if(STOCK->metodo para vero la Cantidad de frutas > aux2->getcantidadFruta()){
          cout<<"-Realizo venta minorista-" << endl ;
          //saco la fruta de stock
      }else{//si no me alcanza la fruta que tengo en stock lo mando a pendientes
      
            cout << "La cantidad solicitada no esta disponible, estara en espera" << endl;M
            COLA_PEDIDOS->agregarPedidoPendiente(aux2);
      }
      
    }

    void GestorDePedidos::gestion(){
      
    }
 




//************FIN CLASE GestorDePedidos******************************

//////////// INICIO CLASE COLA PARA GESTIONAR PEDIDOS ///////////////
class ColaGestorDePedidos{
	private:
		Cola<Pedido*> *colaMayorista;
		Cola<Pedido*> *colaMinorista;
		Cola<Pedido*> *pendiente; //no hay stock
	
	public:
		//Constructor
		ColaPedido(){colaMayorista = new Cola<Pedido*>(); colaMinorista = new Cola<Pedido*>(); pendiente = new Cola<Pedido*>();}
		ColaPedido(Pedido *mayorista, Pedido *minorista){
			colaMayorista = new Cola<Pedido*>(); 
			colaMinorista = new Cola<Pedido*>(); 
			pendiente = new Cola<Pedido*>();
			colaMayorista->encolar(mayorista);
			colaMinorista->encolar(minorista);
		}
		//Metodos
		Cola<Pedido*>* get_colaMayorista(){return colaMayorista;}
		Cola<Pedido*>* get_colaMinorista(){return colaMinorista;}
		Cola<Pedido*>* get_colapendiente(){return pendiente;}
		void imprimirMayorista();
		void imprimirMinorista();
		void imprimirPendiente();	
		void impresionTotal();
		void agg_Pedido(Pedido*, bool);
		void agg_PedidoPendiente(Pedido*);
		Pedido get_pedido();
};

void ColaPedido::imprimirMayorista(){
		if(!colaMayorista->colavacia()){
		Cola<Pedido*> *colaAux = new Cola<Pedido*>();
		colaAux->concat(colaMayorista-->copy());
		
		cout<<"La cola de pedidos mayorista tiene: " <<colaMayorista->size()<<" pedido/s, y son: "<<endl<<endl;
         while (!colaAux->colavacia()) {
        colaAux->tope()->impresion();
        colaAux->desencolar();
    }
    delete colaAux;
		cout<<endl;
	}


}
void ColaPedido::imprimirMinorista(){
		if(!colaMenor->colavacia()){
		Cola<Pedido*> *colaAux = new Cola<Pedido*>();
		colaAux->concat(colaMenor->copy());

		cout<<"La cola de pedidos minorista tiene: " <<colaMenor->size()<<" pedido/s, y son: "<<endl<<endl;
         while (!colaAux->colavacia()) {
        colaAux->tope()->impresion();
        colaAux->desencolar();
    }
    delete colaAux;
		cout<<endl;
	}
}
void ColaPedido::imprimirPendiente(){
		if(!pendiente->colavacia()){
		Cola<Pedido*> *colaAux = new Cola<Pedido*>();
		colaAux->concat(pendiente->copy());

		cout<<"La cola de pedidos que no se pudieron realizar " <<pendiente->size()<<" pedido/s, y son: "<<endl<<endl;
         while (!colaAux->colavacia()) {
        colaAux->tope()->impresion();
        colaAux->desencolar();
    }
    delete colaAux;
		cout<<endl;
	}

}
void ColaPedido::impresionTotal(){

    imprimirMayorista();
    cout<<endl;

    imprimirMinorista();
    cout<<endl;

    imprimirPendiente();
    cout<<endl;

}
void ColaPedido::agg_Pedido(Pedido *p, bool mayorista){
	if(mayorista == true){
		colaMayorista->encolar(p);
	}
	else{
		colaMinorista->encolar(p);
	}
}

void ColaPedido::agregarPedidoPendiente(Pedido *p){
	pendiente->encolar(p);
}

//*************** FIN CLASE COLA ************************


int main(){
 //poner pedidos que se me canten
}
