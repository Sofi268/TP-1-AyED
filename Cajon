#include <iostream>
#include <vector>
#include <stack>

using namespace std;
#include 
template<class Fruta> class Nodo{
    private:
        Fruta fruta;
        Nodo* next;
    public:
        Nodo(){next= NULL;};
        Nodo(Fruta m){fruta = m; next = NULL;};
        void setFruta(Fruta a){fruta = a; };
        void setnext(Nodo* n) {next = n;};
};
class Cajon: public Fruta{
    private:
        Nodo<Fruta>* czo;
        int ID;
        int CANT_FRUTA;
        string TIPO_FRUTA;
        bool cantidadCajones[10];
        bool LLENO;
    public:
        Cajon(){
            czo = new Nodo<Fruta>();  
            ID = 0;
            CANT_FRUTA = 0;
            TIPO_FRUTA = "";
            LLENO = false;
         }
         //Setters
         void setCajonesDisponibles();
         void setID(int i);
         //Getters
         
         //Funciones
         void comprobarEspacioLibre(Fruta f);         
         void agregarFruta(Fruta f);
         bool EstaLleno();
         void divCajones(Fruta f);
};
void Cajon::setCajonesDisponibles(){
    //plantear recursividad hasta obtener el primer bool LLENO = false en la posicion i.
    if(!LLENO){
        int i = 0;
        setID(i);
    }
}
void Cajon::setID(int i){
    ID = i;
}
void Cajon::agregarFruta(Fruta f){
    Nodo<Fruta>* nueva = new Nodo<Fruta>(f);
    nueva->setnext(czo);
    czo = nueva;
    CANT_FRUTA++;
    if(CANT_FRUTA == 20){LLENO = true;}        
}
void Cajon::comprobarEspacioLibre(Fruta f){
    if(CANT_FRUTA<20){
        agregarFruta(f);
    }
}
bool Cajon::EstaLleno(){
        return LLENO;
}

// void Cajon::divCajones(Fruta f){
//     int cajones,n,residual; 
//     int n = f.getCantFruta();
//     if(n>20){
//         n=n-20;
//         cajones++;
//         divCajones();
//     }     
//     else if (n==20){
//         n=n-20;
//         cajones++;      
//     }
//     else {
//         residual=n;
//     }
//         cout<<"Cajones Necesarios: "<<cajones<<" + residual"<<n;

//     }
